{"version":3,"sources":["actions/constants.js","components/freiendsList.js","actions/friendsListActions.js","store.js","reducers/rootReducer.js","App.js","reportWebVitals.js","index.js"],"names":["GET_FRIENDS","connect","state","friendsList","dispatch","GetFriends","data","type","payload","props","useState","search","setSearch","name","setName","currentpage","setCurrentPage","list","setList","originalList","setOriginalList","noOfPages","setNoOfPages","favourite","setFavourite","totalEntities","setTotalEntities","hightlighted","setHighlighted","message","setMessage","status","setStatus","deleteStatus","setDeleteStatus","deleteId","setDeleteId","useEffect","newList","sort","a","b","toLowerCase","length","pages","Math","trunc","sortedList","splice","checkActive","friend","replace","trim","onPageBtn","n","currentList","className","id","onClick","originalList1","friendsList1","originalList2","filter","li2","friendsList2","li3","newpage","setTimeout","onDeleteSuccess","favourites","res","onFavourite","placeholder","value","onChange","e","target","newArray","includes","array","onKeyPress","charCode","some","index","findIndex","list5","push","pages1","sorArray","onAdd","disabled","undefined","map","i","list1","j","k","onFav","curPage","onPrev","onNext","store","createStore","action","applyMiddleware","thunk","App","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8836f042.chunk.js","sourcesContent":["export const GET_FRIENDS = \"GET_FRIENDS\";","import { useEffect, useState } from \"react\";\nimport \"../css/friendsList.css\";\nimport { connect } from 'react-redux';\nimport { GetFriends } from '../actions/friendsListActions';\n\nconst FriendsList = props => {\n    const [search, setSearch] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [currentpage, setCurrentPage] = useState(1);\n    const [list, setList] = useState([]);\n    const [originalList, setOriginalList] = useState();\n    const [noOfPages, setNoOfPages] = useState();\n    const [favourite, setFavourite] = useState(false);\n    const [totalEntities, setTotalEntities] = useState();\n    const [hightlighted, setHighlighted] = useState(\"\");\n    const [message, setMessage] = useState(\"\")\n    const [status, setStatus] = useState(0)\n    const [deleteStatus, setDeleteStatus] = useState(false)\n    const [deleteId, setDeleteId] = useState()\n\n    useEffect(() => {\n        let friendList = [\n            {\n                name: \"Rahul Gupta\",\n                favourite: true\n            },\n            {\n                name: \"Shivangi Sharma\",\n                favourite: false\n            },\n            {\n                name: \"Akash Singh\",\n                favourite: false\n            },\n            {\n                name: \"Kumar madhu\",\n                favourite: false\n            },\n            {\n                name: \"Karthik N\",\n                favourite: true\n            },\n            {\n                name: \"Anand C haveri\",\n                favourite: true\n            },\n            {\n                name: \"Smriti Mandana\",\n                favourite: false\n            },\n            {\n                name: \"Rahul Dravid\",\n                favourite: false\n            },\n            {\n                name: \"Virat Kohli\",\n                favourite: false\n            },\n            {\n                name: \"Sehwag\",\n                favourite: true\n            },\n            {\n                name: \"Mithali Raj\",\n                favourite: true\n            },\n        ]\n        let newList = friendList.sort(function (a, b) {\n            if (a.name.toLowerCase() < b.name.toLowerCase()) { return -1; }\n            if (a.name.toLowerCase() > b.name.toLowerCase()) { return 1; }\n        })\n        if (newList.length) {\n            props.GetFriends(newList)\n            let pages = newList.length % 4;\n            if (pages > 0) {\n                setNoOfPages(Math.trunc(newList.length / 4) + 1)\n            }\n            else {\n                setNoOfPages(Math.trunc(newList.length / 4))\n            }\n            setOriginalList([...newList])\n            setTotalEntities(newList.length)\n            let array = [...newList]\n            let sortedList = array.splice(0, 4);\n            setList(sortedList)\n        }\n    }, [])\n\n    const onPrev = () => {\n        if (currentpage > 1) {\n            let newList = [...originalList]\n            let curPage = currentpage - 1;\n            let sortedList = newList.splice((curPage * 4) - 4, 4);\n            setList(sortedList)\n            setCurrentPage(curPage)\n        }\n        setHighlighted(\"\")\n        setName(\"\")\n    }\n\n    const onNext = () => {\n        if (currentpage < noOfPages) {\n            let newList = [...originalList]\n            let curPage = currentpage + 1;\n            let sortedList = newList.splice((curPage * 4) - 4, 4);\n            setList(sortedList)\n            setCurrentPage(curPage)\n        }\n        setHighlighted(\"\")\n        setName(\"\")\n    }\n\n    const onFavourite = () => {\n        if (favourite == false) {\n            setFavourite(true);\n            let newList = [...props.friendsList]\n            let favourites = newList.filter(res => res.favourite == true)\n            let pages = favourites.length % 4;\n            if (pages > 0) {\n                setNoOfPages(Math.trunc(favourites.length / 4) + 1)\n            }\n            else {\n                setNoOfPages(Math.trunc(favourites.length / 4))\n            }\n            setOriginalList([...favourites])\n            setTotalEntities(favourites.length)\n            let array = [...favourites]\n            let sortedList = array.splice(0, 4);\n            setList(sortedList);\n            setCurrentPage(1)\n            setHighlighted(\"\")\n            setName(\"\")\n            setSearch(\"\")\n        }\n        else {\n            setFavourite(false);\n            let favourites = [...props.friendsList]\n            let pages = favourites.length % 4;\n            if (pages > 0) {\n                setNoOfPages(Math.trunc(favourites.length / 4) + 1)\n            }\n            else {\n                setNoOfPages(Math.trunc(favourites.length / 4))\n            }\n            setOriginalList([...favourites])\n            setTotalEntities(favourites.length)\n            let array = [...favourites]\n            let sortedList = array.splice(0, 4);\n            setList(sortedList);\n            setCurrentPage(1)\n            setHighlighted(\"\")\n            setName(\"\")\n            setSearch(\"\")\n        }\n    }\n\n    const onNameChange = (e) => {\n        setName(e.target.value)\n        setHighlighted(\"\")\n    }\n\n    const onSearchChange = (e) => {\n        setSearch(e.target.value)\n        setName(\"\")\n        setHighlighted(\"\")\n        let list = [...originalList]\n        let newArray = list.filter(res => res.name.toLowerCase().includes(e.target.value.toLowerCase().replace(/\\s+/g, ' ').trim()))\n        let pages = newArray.length % 4;\n        if (pages > 0) {\n            setNoOfPages(Math.trunc(newArray.length / 4) + 1)\n        }\n        else {\n            setNoOfPages(Math.trunc(newArray.length / 4))\n        }\n        let array = [...newArray]\n        setTotalEntities(newArray.length)\n        let sortedList = array.splice(0, 4);\n        setList(sortedList);\n        setCurrentPage(1)\n    }\n\n    const checkActive = (friend) => {\n        return friend.name.toLowerCase() == name.toLowerCase().replace(/\\s+/g, ' ').trim()\n    }\n\n    const handleKeypress = e => {\n        if (e.charCode === 13) {\n            if (name != \"\") {\n                let list = [...props.friendsList];\n                if (list.some(res => res.name.toLowerCase() == name.toLowerCase().replace(/\\s+/g, ' ').trim())) {\n                    let index = list.findIndex(checkActive);\n                    setFavourite(false)\n                    setHighlighted(name.toLowerCase().replace(/\\s+/g, ' ').trim())\n                    let pages = index % 4;\n                    if (index == 0) {\n                        setCurrentPage(1)\n                        let sorArray = [...list]\n                        let sortedList = sorArray.splice(index, 4);\n                        setList(sortedList)\n                    }\n                    else if (pages > 0) {\n                        setCurrentPage(Math.trunc((index / 4) + 1))\n                        let sortedList = list.splice(((Math.trunc(index / 4) + 1) * 4) - 4, 4);\n                        setList(sortedList)\n                    }\n                    else {\n                        setCurrentPage(Math.trunc(index / 4))\n                        let sortedList = list.splice(((Math.trunc(index / 4) + 1) * 4) - 4, 4);\n                        setList(sortedList)\n                    }\n                    setName(\"\")\n                    setSearch(\"\")\n                    setMessage(\"This name is already in your Friends List.\")\n                    setStatus(1)\n                    setTimeout(() => {\n                        setMessage(\"\")\n                        setStatus(0)\n                    }, 2000)\n                }\n                else {\n                    let list5 = [...props.friendsList];\n                    setFavourite(false)\n                    setHighlighted(name.toLowerCase().replace(/\\s+/g, ' ').trim())\n                    list5.push({\n                        name: name.toLowerCase().replace(/\\s+/g, ' ').trim(),\n                        favourite: false\n                    })\n                    let newList = list5.sort(function (a, b) {\n                        if (a.name.toLowerCase() < b.name.toLowerCase()) { return -1; }\n                        if (a.name.toLowerCase() > b.name.toLowerCase()) { return 1; }\n                    })\n                    if (newList.length) {\n                        props.GetFriends(newList)\n                        setOriginalList([...newList])\n                        let pages1 = newList.length % 4;\n                        if (pages1 > 0) {\n                            setNoOfPages(Math.trunc(newList.length / 4) + 1)\n                        }\n                        else {\n                            setNoOfPages(Math.trunc(newList.length / 4))\n                        }\n                        setTotalEntities(newList.length)\n                        let array = [...newList]\n                        let index = array.findIndex(checkActive);\n                        let pages = index % 4;\n                        if (index == 0) {\n                            setCurrentPage(1)\n                            let sorArray = [...newList]\n                            let sortedList = sorArray.splice(index, 4);\n                            setList(sortedList)\n                        }\n                        else if (pages > 0) {\n                            let sorArray = [...newList]\n                            setCurrentPage(Math.trunc(index / 4) + 1)\n                            let sortedList = sorArray.splice(Math.trunc(index / 4) * 4, 4);\n                            setList(sortedList)\n                        }\n                        else {\n                            setCurrentPage(Math.trunc(index / 4) + 1)\n                            let sorArray = [...newList]\n                            let sortedList = sorArray.splice(index, 4);\n                            setList(sortedList)\n                        }\n                    }\n                    setName(\"\")\n                    setSearch(\"\")\n                    setMessage(\"New contact added to your friends List.\")\n                    setStatus(2)\n                    setTimeout(() => {\n                        setMessage(\"\")\n                        setStatus(0)\n                    }, 2000)\n                }\n            }\n        }\n    };\n\n    const onAdd = () => {\n        if (name != \"\") {\n            let list = [...props.friendsList];\n            if (list.some(res => res.name.toLowerCase() == name.toLowerCase().replace(/\\s+/g, ' ').trim())) {\n                let index = list.findIndex(checkActive);\n                setFavourite(false)\n                setHighlighted(name.toLowerCase().replace(/\\s+/g, ' ').trim())\n                let pages = index % 4;\n                if (index == 0) {\n                    setCurrentPage(1)\n                    let sorArray = [...list]\n                    let sortedList = sorArray.splice(index, 4);\n                    setList(sortedList)\n                }\n                else if (pages > 0) {\n                    setCurrentPage(Math.trunc((index / 4) + 1))\n                    let sortedList = list.splice(((Math.trunc(index / 4) + 1) * 4) - 4, 4);\n                    setList(sortedList)\n                }\n                else {\n                    setCurrentPage(Math.trunc(index / 4))\n                    let sortedList = list.splice(((Math.trunc(index / 4) + 1) * 4) - 4, 4);\n                    setList(sortedList)\n                }\n                setName(\"\")\n                setSearch(\"\")\n                setMessage(\"This name is already in your Friends List.\")\n                setStatus(1)\n                setTimeout(() => {\n                    setMessage(\"\")\n                    setStatus(0)\n                }, 2000)\n            }\n            else {\n                let list5 = [...props.friendsList];\n                setFavourite(false)\n                list5.push({\n                    name: name.toLowerCase().replace(/\\s+/g, ' ').trim(),\n                    favourite: false\n                })\n                setHighlighted(name.toLowerCase().replace(/\\s+/g, ' ').trim())\n                let newList = list5.sort(function (a, b) {\n                    if (a.name.toLowerCase() < b.name.toLowerCase()) { return -1; }\n                    if (a.name.toLowerCase() > b.name.toLowerCase()) { return 1; }\n                })\n                if (newList.length) {\n                    props.GetFriends(newList)\n                    setOriginalList([...newList])\n                    let pages1 = newList.length % 4;\n                        if (pages1 > 0) {\n                            setNoOfPages(Math.trunc(newList.length / 4) + 1)\n                        }\n                        else {\n                            setNoOfPages(Math.trunc(newList.length / 4))\n                        }\n                    setTotalEntities(newList.length)\n                    let array = [...newList]\n                    let index = array.findIndex(checkActive);\n                    let pages = index % 4;\n                    if (index == 0) {\n                        setCurrentPage(1)\n                        let sorArray = [...newList]\n                        let sortedList = sorArray.splice(index, 4);\n                        setList(sortedList)\n                    }\n                    else if (pages > 0) {\n                        let sorArray = [...newList]\n                        setCurrentPage(Math.trunc(index / 4) + 1)\n                        let sortedList = sorArray.splice(Math.trunc(index / 4) * 4, 4);\n                        setList(sortedList)\n                    }\n                    else {\n                        setCurrentPage(Math.trunc(index / 4) + 1)\n                        let sorArray = [...newList]\n                        let sortedList = sorArray.splice(index, 4);\n                        setList(sortedList)\n                    }\n                }\n                setName(\"\")\n                setSearch(\"\")\n                setMessage(\"New contact added to your friends List.\")\n                setStatus(2)\n                setTimeout(() => {\n                    setMessage(\"\")\n                    setStatus(0)\n                }, 2000)\n            }\n        }\n    }\n\n    const onFav = (n) => {\n        let list1 = [...list];\n        let originalList1 = [...originalList];\n        let friendsList1 = [...props.friendsList];\n        for (let i = 0; i < list1.length; i++) {\n            if (list1[i].name.toLowerCase() == n.toLowerCase()) {\n                list1[i].favourite = !list1[i].favourite\n                if (list1[i].favourite == true) {\n                    setMessage(\"Successfully added from your favourites.\")\n                    setStatus(2)\n                    setTimeout(() => {\n                        setMessage(\"\")\n                        setStatus(0)\n                    }, 2000)\n                }\n                else {\n                    setMessage(\"Successfully removed from your favourites.\")\n                    setStatus(1)\n                    setTimeout(() => {\n                        setMessage(\"\")\n                        setStatus(0)\n                    }, 2000)\n                }\n            }\n        }\n        for (let j = 0; j < originalList1.length; j++) {\n            if (originalList1[j].name.toLowerCase() == n.toLowerCase()) {\n                originalList1[j].favourite = !originalList1[j].favourite\n            }\n        }\n        for (let k = 0; k < friendsList1.length; k++) {\n            if (friendsList1[k].name.toLowerCase() == n.toLowerCase()) {\n                friendsList1[k].favourite = !friendsList1[k].favourite\n            }\n        }\n        setHighlighted(\"\")\n        setName(\"\")\n        setList(list1)\n        setOriginalList(originalList1)\n        props.GetFriends(friendsList1)\n    }\n\n    const onDelete = (n) => {\n        setDeleteId(n.toLowerCase())\n        setDeleteStatus(true)\n        setHighlighted(\"\")\n        setName(\"\")\n    }\n\n    const onPageBtn = (n) => {\n        let newList = [...originalList]\n        setCurrentPage(n)\n        let currentList = newList.splice((n * 4) - 4, 4)\n        setList(currentList)\n    }\n\n    const onNo = () => {\n        setDeleteId(\"\")\n        setDeleteStatus(false)\n    }\n\n    const onDeleteSuccess = () => {\n        let n = deleteId;\n        let originalList1 = [...originalList];\n        let friendsList1 = [...props.friendsList];\n        let originalList2 = originalList1.filter(li2 => li2.name.toLowerCase() != n.toLowerCase())\n        let friendsList2 = friendsList1.filter(li3 => li3.name.toLowerCase() != n.toLowerCase())\n        let newList = [...originalList2]\n        setOriginalList(originalList2)\n        props.GetFriends(friendsList2)\n        setTotalEntities(originalList2.length)\n        let pages = originalList2.length % 4;\n        if (pages > 0) {\n            setNoOfPages(Math.trunc(originalList2.length / 4) + 1)\n        }\n        else {\n            setNoOfPages(Math.trunc(originalList2.length / 4))\n        }\n        if (originalList2.length <= (currentpage * 4) - 4) {\n            let newpage = currentpage - 1\n            setCurrentPage(newpage)\n            let sortedList = newList.splice((newpage * 4) - 4, 4);\n            setList(sortedList)\n        }\n        else {\n            let newpage = currentpage;\n            setCurrentPage(newpage)\n            let sortedList = newList.splice((newpage * 4) - 4, 4);\n            setList(sortedList)\n        }\n        setMessage(\"Successfully deleted from your friends List.\")\n        setStatus(2)\n        setTimeout(() => {\n            setMessage(\"\")\n            setStatus(0)\n        }, 2000)\n        setDeleteStatus(false)\n    }\n\n    return (\n        <div className=\"container\">\n            {status != 0 &&\n                <div className={status == 1 ? \"danger alert_message\" : \"success alert_message\"}>\n                    {status == 2 ? <i className=\"fa fa-check-circle\" /> :\n                        <i className=\"fa fa-warning\" />}\n                    <div>{message}</div>\n                </div>}\n            {deleteStatus == true && <div id=\"myModal\" className=\"modal\">\n                <div className=\"modal-content\">\n                    <i className=\"fa fa-warning\" />\n                    <div className=\"head\">Are you sure?</div>\n                    <div className=\"sub_txt\">You want to delete <span>{deleteId}</span> from your friend list.</div>\n                    <div className=\"btn_grp\">\n                        <button className=\"remove_btn\" onClick={() => onNo()}>No</button>\n                        <button className=\"ok_btn\" onClick={() => onDeleteSuccess()}>Delete</button>\n                    </div>\n                </div>\n            </div>}\n            <div className=\"list_main_container\">\n                <div className=\"list_heading\">\n                    <div className=\"header\">Friends List</div>\n                    <div className=\"icons_container\">\n                        <div onClick={() => onFavourite()} className={favourite == false ? \"star_icon\" : \"active star_icon\"}>\n                            <div className={favourite == false ? \"inside_star_icon\" : \"active inside_star_icon\"}></div>\n                        </div>\n                        <span className=\"tooltiptext\">favourites</span>\n                    </div>\n                </div>\n                <div className=\"search_container\">\n                    <i className=\"fa fa-search\"></i>\n                    <input type=\"text\" placeholder=\"Search\" value={search || ''} onChange={onSearchChange} />\n                </div>\n                <div className=\"add_friend_container\">\n                    <input type=\"text\" placeholder=\"Enter your friend name\" value={name || ''} onChange={onNameChange} onKeyPress={handleKeypress} />\n                    <button className=\"add_btn\" onClick={() => onAdd()} disabled={name == \"\" ? true : false}>Add</button>\n                </div>\n                {list != undefined ? list.length ?\n                    <div className=\"list_container\">\n                        {list.map((res, i) =>\n                            <div className={hightlighted.toLowerCase() != res.name.toLowerCase() ? \"friend_container\" : \"newAdded friend_container\"} key={i}>\n                                <div className=\"name_container\">\n                                    <div className=\"name\">{res.name.toLowerCase()}</div>\n                                    <div className=\"tag_line\">is you friend</div>\n                                </div>\n                                <div className=\"action_icons_container\">\n                                    <div className=\"fav_icon_container\" onClick={() => onFav(res.name)}>\n                                        <div className={res.favourite == false ? \"star_icon\" : \"active star_icon\"}>\n                                            <div className={res.favourite == false ? \"inside_star_icon\" : \"active inside_star_icon\"}></div>\n                                        </div>\n                                    </div>\n                                    <div className=\"delete_icon_container\" onClick={() => onDelete(res.name)}>\n                                        <i className=\"fa fa-trash\"></i>\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n                    </div> :\n                    <div className=\"no_friend\">No data to dispaly.</div>:null\n                }\n            </div>\n            {originalList != undefined && originalList.length >3 &&\n                <div className=\"pagination_container\">\n                    <div className=\"pagination_txt\">\n                        Showing {currentpage * 4 - 3} to {currentpage * 4 > totalEntities ? totalEntities : currentpage * 4} of {totalEntities} entries\n                    </div>\n                    <div className=\"pagination_btns\">\n                        <div className={currentpage == 1 ? \"deactive pagination_btn\" : \"pagination_btn\"} onClick={() => onPrev()}>{\"< Prev\"}</div>\n                        {currentpage == 1 ?\n                            <div className=\"pagination_numbers\">\n                                <div className=\"active page_number\" onClick={() => onPageBtn(1)}>1</div>\n                                {noOfPages > 1 && <div className=\"page_number\" onClick={() => onPageBtn(2)}>2</div>}\n                                {noOfPages > 2 && <div className=\"page_number\" onClick={() => onPageBtn(3)}>3</div>}\n                            </div> :\n                            currentpage == noOfPages ?\n                                <div className=\"pagination_numbers\">\n                                    {(noOfPages - 2) > 0 && <div className=\"page_number\" onClick={() => onPageBtn(noOfPages - 2)}>{noOfPages - 2}</div>}\n                                    {(noOfPages - 1) > 0 && <div className=\"page_number\" onClick={() => onPageBtn(noOfPages - 1)}>{noOfPages - 1}</div>}\n                                    <div className=\"active page_number\" onClick={() => onPageBtn(noOfPages)}>{noOfPages}</div>\n                                </div> :\n                                <div className=\"pagination_numbers\">\n                                    <div className=\"page_number\" onClick={() => onPageBtn(currentpage - 1)}>{currentpage - 1}</div>\n                                    <div className=\"active page_number\" onClick={() => onPageBtn(currentpage)}>{currentpage}</div>\n                                    <div className=\"page_number\" onClick={() => onPageBtn(currentpage + 1)}>{currentpage + 1}</div>\n                                </div>}\n                        <div className={noOfPages == currentpage ? \"deactive pagination_btn\" : \"pagination_btn\"} onClick={() => onNext()}>{\"Next >\"}</div>\n                    </div>\n                </div>}\n        </div>\n    )\n}\n\nconst mapStateToProps = state => ({\n    friendsList: state.friendsList\n})\n\nconst mapDispatchToProps = dispatch => ({\n    GetFriends: (data) => dispatch(GetFriends(data))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FriendsList);\n","import { GET_FRIENDS } from \"./constants\"\n\nexport const GetFriends = (data) => {\n    return (dispatch) => {\n        dispatch({\n            type: GET_FRIENDS,\n            payload: data\n        })\n    }\n}","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport Reducers from './reducers/rootReducer';\n\nexport const store = createStore(\n    Reducers,\n    applyMiddleware(thunk)\n);","import { GET_FRIENDS } from \"../actions/constants\";\n\nexport default function Reducers(state = {}, action) {\n    switch (action.type) {\n        case GET_FRIENDS:\n            return ({ ...state, friendsList: action.payload })\n        default:\n            return state;\n    }\n}","import FriendsList from \"./components/freiendsList\";\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport React, { Component } from \"react\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <FriendsList />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}